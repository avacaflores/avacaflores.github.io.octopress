<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Por puro gusto]]></title>
  <link href="http://avacaflores.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://avacaflores.github.io/"/>
  <updated>2014-05-28T22:52:30-04:00</updated>
  <id>http://avacaflores.github.io/</id>
  <author>
    <name><![CDATA[Alfonso Vacaflores]]></name>
    <email><![CDATA[avacaflores@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Scopes in Rails 4]]></title>
    <link href="http://avacaflores.github.io/blog/2014/05/23/scopes-en-rails-4/"/>
    <updated>2014-05-23T00:12:02-04:00</updated>
    <id>http://avacaflores.github.io/blog/2014/05/23/scopes-en-rails-4</id>
    <content type="html"><![CDATA[<p>Rails es un framework muy flexible, existen muchas tareas que se las pueden hacer de diferentes maneras, sin embargo esta flexibilidad se ve empañada por la confusión que existe en internet. Cada version de Rails incorpora nuevos comandos y retira otros, también se puede ver que la sintaxis de los comandos ha ido cambiando en cada versión.</p>

<p>En este post me quiero referir específicamente a los <strong>scopes</strong> y su sintaxis en Rails 4, describiré la sintaxis que me parece mas clara y sencilla.</p>

<p>Primeramente definamos los modelos de ejemplo</p>

<p>``` ruby
class Product &lt; ActiveRecord::Base
  belongs_to :type
end</p>

<p>class Type &lt; ActiveRecord::Base
  has_many_ :products
end
```</p>

<p>Así mismo, asumamos que cada modelo cuenta con un campo <code>title</code></p>

<h2>scope estático</h2>

<p>Serán aquellos que actúan sobre un modelo y que tienen una condición fija, bajo estas premisas, estos podrían ser scopes definidos en los modelo <code>Product</code>:</p>

<p><code>ruby
scope :fixedtitle, lambda { where(:title =&gt; 'computer') }
</code>
Podemos llamar el scope con el siguiente comando <code>Product.fixedtitle</code> que producira el seguinete resultado:</p>

<pre><code>SELECT "products".* 
FROM "products"  
WHERE "products"."title" = 'computer'
</code></pre>

<p>Otro ejemplo de scope estático podría ser:
<code>ruby
scope :titlecontains, lambda { where("title LIKE '%p%'") }
</code>
Que lo llamariamos con el siguiente comando <code>Product.titlecontains</code> y producira el siguiente resultado:</p>

<pre><code>SELECT "products".* 
FROM "products"  
WHERE (title LIKE '%p%')
</code></pre>

<p>Incluso podríamos usar ambos scopes en la misma consulta <code>Product.fixedtitle.titlecontains</code></p>

<pre><code>SELECT "products".* 
FROM "products"  
WHERE "products"."title" = 'computer' AND (title LIKE '%a%')
</code></pre>

<h2>scope variable</h2>

<p>En este caso lo que esperamos es que el scope reciba una variable dinámicamente, para lograrlo debemos usar <code>|variable|</code> para recibir el valor:</p>

<p><code>ruby
scope :variabletitle, lambda { |term| where("title LIKE '%#{term}%'") }
</code>
Deberemos pasar el valor en la llamada al scope de la siguiente manera <code>Product.variabletitle('compu')</code> que producira el siguiente resultado:</p>

<pre><code>SELECT "products".* 
FROM "products"  
WHERE (title LIKE '%compu%')
</code></pre>

<h2>scope variable con dos modelos</h2>

<p>Por ultimo, el caso mas complejo que me tomo varias horas de investigación y pruebas y que me empujo a escribir este post. Como podrán imaginar necesitamos usaremos un scope variable y también usaremos <strong>joins</strong> para enlazar al segundo modelo</p>

<p><code>ruby
scope :bytype, lambda { |type_name| joins(:type).where(‘type.title’ =&gt; type_name) }
</code>
Llamaremos a este scope con <code>Product.bytype('electronics')</code> y producira el siguiente resultado:</p>

<pre><code>SELECT "products".* 
FROM "products" INNER JOIN "types" ON "types"."id" = "products"."type_id" 
WHERE "types"."title" = 'electronics'
</code></pre>

<p><strong>Scopes</strong> en Rails es un tema bastante amplio sobre el cual hay mucho material (el cual no necesariamente es vigente ni). Esta propuesta es sumamente simple pero 100% funcional y puede ser extendida siguiendo el mismo patron.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Archivos YAML para guardar parámetros en Rails]]></title>
    <link href="http://avacaflores.github.io/blog/2014/05/13/archivos-yaml-en-rails/"/>
    <updated>2014-05-13T00:12:02-04:00</updated>
    <id>http://avacaflores.github.io/blog/2014/05/13/archivos-yaml-en-rails</id>
    <content type="html"><![CDATA[<p>Toda aplicación tiene parámetros de configuración que conviene que estén parametrizados para evitar repetición en el código y para tener la facilidad de cambiar los mismos en un solo lugar. Lo que en la herga de Rails diríamos: para estar <a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself">DRY (Don&rsquo;t Repeat Yourself)</a></p>

<p>Si bien en una aplicación en Rails se podrían crear variables globales la mejor opción a futuro es la de crear un modelo que guarde toda esta información en la base de datos. Sin embargo esto implicaría crear todas las pantallas y controladores de administración que muchas veces no justifica porque estos valores no cambian con frecuencia.</p>

<p>Como una solución intermedia al problema se podría usar archivos <strong>YAML</strong>, similares a los que se usa en Rails para la configuración de la base de datos <code>database.yml</code></p>

<p>Primeramente crearemos el archivo <code>yml</code> que contendrá 3 keys con nuestros parámetros de configuración</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>/config/config.yml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">store_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">‘myStore&#39;</span>
</span><span class='line'><span class="l-Scalar-Plain">store_phone</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">‘1-212-328-3212‘</span>
</span><span class='line'><span class="l-Scalar-Plain">store_email</span><span class="p-Indicator">:</span> <span class="nl">&amp;lsquo</span><span class="l-Scalar-Plain">;&lt;a href=&quot;&amp;#109;&amp;#97;&amp;#105;&amp;#x6c;&amp;#x74;&amp;#x6f;&amp;#x3a;&amp;#x6d;&amp;#x79;&amp;#x73;&amp;#116;&amp;#x6f;&amp;#114;&amp;#x65;&amp;#64;&amp;#x67;&amp;#x6d;&amp;#x61;&amp;#105;&amp;#x6c;&amp;#46;&amp;#99;&amp;#x6f;&amp;#x6d;&quot;&gt;&amp;#x6d;&amp;#121;&amp;#x73;&amp;#116;&amp;#111;&amp;#114;&amp;#101;&amp;#x40;&amp;#103;&amp;#109;&amp;#97;&amp;#105;&amp;#x6c;&amp;#x2e;&amp;#x63;&amp;#x6f;&amp;#x6d;&lt;/a&gt;&amp;rsquo;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Luego es necesario cargar este archivo al iniciar la aplicación por ejemplo en el <code>/config/application.rb</code></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>/config/application.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">CONFIG</span> <span class="o">=</span> <span class="no">YAML</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">.</span><span class="n">.</span><span class="o">/</span><span class="n">config</span><span class="o">.</span><span class="n">yml</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="no">FILE</span><span class="o">&lt;</span><span class="sr">/strong&gt;)))</span>
</span><span class='line'><span class="sr">CONFIG.symbolize_keys!</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>La primer línea lee el archivo <code>config.yml</code> y lo convierte en un <strong>hash</strong> que será guardado en la variable <code>CONFIG</code>. La segunda línea habilitará este <strong>hash</strong> para que pueda ser llamado utilizando símbolos como veremos a continuación.</p>

<p>Desde una vista podremos llamar a nuestros parámetros de la siguiente manera:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&amp;lt;%= CONFIG[:store_name] </span><span class="err">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&amp;lt;%= CONFIG[:store_phone] </span><span class="err">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&amp;lt;%= CONFIG[:store_email] </span><span class="err">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Esta es una manera muy sencilla y limpia de usar archivos <strong>YAML</strong> para guardar parámetros de configuración, la cual puede ser extendida para muchos otros usos. Para más información de la sintaxis de los archivos YAML visitar el sitio offical <a href="http://www.yaml.org">http://www.yaml.org</a> o la página de Wikipedia <a href="http://en.wikipedia.org/wiki/YAML">YAML</a>.</p>
]]></content>
  </entry>
  
</feed>
